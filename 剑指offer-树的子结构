#输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）


class Solution {
public:
    bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2)
    {
        if(!pRoot1 || !pRoot2) return false;
        bool res=false;
        if(pRoot1->val == pRoot2->val)res=isEqual(pRoot1,pRoot2); // 找到判断子树
        if(!res) res=HasSubtree(pRoot1->left,pRoot2); // 未找到匹配的根节点以及匹配的子树，则继续向下递归
        if(!res) res=HasSubtree(pRoot1->right,pRoot2);
        return res;
    }
     
    bool isEqual(TreeNode* pRoot1, TreeNode* pRoot2)
    {
        if(!pRoot2) return true; // 子树遍历完成（关键语句）
        if(!pRoot1) return false; // 主树异常时的输出（关键语句：提高鲁棒性）
        bool res=true;
        if(pRoot1->val!=pRoot2->val) res=false;
        if(res) res=isEqual(pRoot1->left,pRoot2->left);
        if(res) res=isEqual(pRoot1->right,pRoot2->right);
        return res;
    }
};
